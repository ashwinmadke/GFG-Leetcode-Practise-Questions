// https://leetcode.com/problems/binary-tree-level-order-traversal/
// TC -> O(n)
// SC -> O(n) bcoz of queue



public List<List<Integer>> levelOrder(TreeNode root) {
         // Agar root null hai toh empty result return kar do
        if(root == null){
            return new ArrayList<>();
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        List<List<Integer>> result = new ArrayList<>();
        // Jab tak queue empty nahi hoti tab tak loop chalayenge
        while (!queue.isEmpty()){
            int currLevelSize = queue.size(); // curr level nodes count
            List<Integer> currLevel = new ArrayList<>(); // curr level ke liye ek list

            // current level ke saare nodes process karo
            for(int i=0; i<currLevelSize; i++){
                //queue se node nikal kar uska value currlevel list me dal do
                TreeNode node = queue.poll();
                currLevel.add(node.val);

                if(node.left != null){// agar left child hai toh queue mein daal do
                    queue.offer(node.left);
                }
                if(node.right != null){// agar right child hai toh queue mein daal do
                    queue.offer(node.right);
                }
            }
            result.add(currLevel);// current level ki list ko final result mein add kar do
        }
        return result;
}
