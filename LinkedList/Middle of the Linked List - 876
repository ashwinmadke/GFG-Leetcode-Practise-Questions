// https://leetcode.com/problems/middle-of-the-linked-list/

**********************************************************************************************************************************************************************
Brute Approach : Two Pass
Idea - Count total number of nodes n, then traverse again to the n/2-th node and return it.
TC - O(n) + O(n) = O(2n) = O(n)
SC - O(1)

**********************************************************************************************************************************************************************
Optimal Approach : Using Fast & Slow pointer - Single pass
Idea - Use two pointers, slow moves 1 step and fast moves 2 steps. When fast reaches the end, slow will be at the middle node.
TC - O(n)
SC - O(1)

public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast != null && fast.next != null ){
            slow = slow.next;
            fast = fast.next.next;
        } 
        return slow;
}
