// https://leetcode.com/problems/intersection-of-two-linked-lists/

**********************************************************************************************************************************************************************
Brute Approach - 
Idea - Compare every node of List A with every node of List B. Return the first common node.
TC - O(m*n), SC - O(1)

Better Approach - Using Hashset
Idea - Iterate over listA and store in Hashset, and now iterate over ListB and check if any node repeats,if yes return
else return null.
TC - O(m+n), SC - O(n)

Optimal Approach 1 - Length Difference
Idea - count nodes in both lists, calculate difference and skip difference nodes in longer list.
start traversing both list a step at a time, if there is intersection they will meet, else both reach null;
TC - O(m+n), SC - O(1)

Optimal Approach 2- Using Two pointers
Idea - Take two pointers p1 for headA and p2 for headB. move pointers one step at a time, when pointer reaches null
assign it to head of other list, if there is an intersection both will meet, if not both will reach null.
TC - O(m+n), SC - O(1)

*********************************************************************************************************************************************************************
Code : Optimal Approach 2
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null) return null; //edge case

        ListNode p1 = headA;
        ListNode p2 = headB;

        while(p1 != p2){
          p1 = (p1 != null) ? p1.next : headB; 
          p2 = (p2 != null) ? p2.next : headA;
        }
        return p1;
    }
}
