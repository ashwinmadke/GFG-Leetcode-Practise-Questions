// https://leetcode.com/problems/partition-equal-subset-sum/

// Recursive Approach (Brute Force)
// TC - O(2^n)
// SC - O(n) // recursive stack space

public boolean canPartition(int[] nums) {
        int n = nums.length;
        int totSum = 0;

        for(int i : nums) // calculate whole array elements sum
        totSum += i;

        if(totSum % 2 != 0) return false; // if totSum is odd means we can't divide array

        int target = totSum/2;

        return subsetSum(nums,n-1, target);
    }
    private static boolean subsetSum(int[] arr, int i, int target){
        // base case
        if(target == 0) return true; // means we found 1 valid subset

        if(i < 0 || target < 0) return false; // if index out of bound or target is -ve return false
   
        boolean include = subsetSum(arr, i-1, target - arr[i]); //include
        boolean exclude = subsetSum(arr,i-1, target);  //exclude

        return include || exclude;
    }

// Top Down Approach : Memoization
// TC - (n * target)
// SC - (n * target) + recursive stack

public boolean canPartition(int[] nums) {
        int n = nums.length;
        int totSum = 0;

        for(int i : nums) // calculate whole array elements sum
        totSum += i;

        if(totSum % 2 != 0) return false; // if totSum is odd means we can't divide array

        int target = totSum/2;
        Boolean[][] dp = new Boolean[n][target + 1];

        return subsetSum(nums,n-1, target,dp);
    }
    private static boolean subsetSum(int[] arr, int i, int target,Boolean[][] dp){
        // base case
        if(target == 0) return true; // means we found 1 valid subset

        if(i < 0 || target < 0) return false; // if index out of bound or target is -ve return false

        //already calculated
        if(dp[i][target] != null) return dp[i][target];
        
        boolean include = subsetSum(arr, i-1, target - arr[i],dp); //include
        boolean exclude = subsetSum(arr,i-1, target,dp);  //exclude

        return dp[i][target] =  include || exclude; 
    }
