// https://leetcode.com/problems/min-cost-climbing-stairs/

// Recursive Code
// Time Complexity - O(2^n)
// Space Complexity - O(n)

public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        return ways(n,cost);
  }

    private static int ways(int n, int[] cost){
        if(n <= 1) return 0;

        return Math.min(cost[n-1] + ways(n-1,cost), cost[n-2] + ways(n-2,cost));
}


// Approach - Top Down -  Memoization 
// Time Complexity - O(n)
// Space Complexity - O(n) + O(n) = O(2n) -> O(n)

public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        int[] dp = new int[n+1];
        Arrays.fill(dp,-1);
        return waysmemo(n,cost, dp);
    }

    private static int waysmemo(int n, int[] cost, int[] dp){
        if(n <= 1) return 0;

        // already calculated
        if(dp[n] != -1) {
            return dp[n];
        }
        return dp[n] = Math.min(cost[n-1] + waysmemo(n-1,cost, dp),
         cost[n-2] + waysmemo(n-2,cost,dp)); // store
 }
