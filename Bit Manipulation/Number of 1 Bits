// https://leetcode.com/problems/number-of-1-bits/description/

/************************************************************ Brute Force Approach ************************************************/

Idea - Convert n into binary numbers and traverse and count 1's and return it.
TC - O(no of bits) = O(1)
SC - O(no of bits) = O(1)

public int hammingWeight(int n) {
        String binaryString = Integer.toBinaryString(n);
        int count = 0;

        for(char c : binaryString.toCharArray()){
            if(c=='1'){
                count++;
            }
        }
        return count;
    }


/************************************************************ Optimal Approach ************************************************/

Idea - keep right shifting n and check if least significant bit is 1 by using (n & 1) increment the count when it is 1.
TC - O(no of bits) = O(1)
SC - O(1)
public int hammingWeight(int n) {
        int count = 0;
        while (n!=0){
            count += (n & 1);
            n >>>= 1;
        }
        return count;
    }
