// https://leetcode.com/problems/maximum-average-subarray-i/

Brute Force :
Idea - Try all possible pairs of k length and keep track of maxSum,in the end return maxSum/k.
TC - O(n*k)
SC - O(1)

public static double findMaxAverage(int[] nums, int k) {
        int n = nums.length;
        int maxSum = Integer.MIN_VALUE;
        
        // traverse over all possible starting points of subarrays of length k
        for (int i = 0; i <= n - k; i++) {
            int windowSum = 0;
            
            // Calculate the sum of the subarray starting at index i
            for (int j = i; j < i + k; j++) {
                windowSum += nums[j];
            }
            
            // Update maxSum if current windowSum is greater
            maxSum = Math.max(maxSum, windowSum);
        }
        
        // Return the maximum average
        return (double) maxSum / k;
    }

Optmial Approach - Sliding window
TC - O(n)
SC - O(1)

public double findMaxAverage(int[] nums, int k) {
        int n = nums.length;

        //sum of first window
        int windowSum = 0;
        for(int i=0; i< k; i++){
            windowSum += nums[i];
        }

        // Slide the window from start to end of the array
        int maxSum = windowSum;
        for (int i=k; i< n; i++){
            windowSum += nums[i] - nums[i-k];// add next element and remove first element
            maxSum = Math.max(maxSum,windowSum);
        }
        return (double) maxSum/k;
    }
