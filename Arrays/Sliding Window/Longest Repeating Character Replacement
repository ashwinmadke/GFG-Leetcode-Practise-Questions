// https://leetcode.com/problems/longest-repeating-character-replacement/

/************************************************************ Brute Force Approach ************************************************/

Steps:
Iterate over all possible substrings.
Count the frequency of characters in the substring.
Calculate how many replacements are needed to make all characters the same.
If replacements â‰¤ k, update the max length.

TC - O(n^2)
SC - O(1)


public int characterReplacement(String s, int k) {
        int n = s.length();
        int maxLength = 0;

        // Iterate over all possible start point of substring
        for (int left = 0; left < n; left++) {
            int[] freq = new int[26];
            int maxFreq = 0;

            // Iterate over all possible end point of substring
            for (int right = left; right < n; right++) {
                freq[s.charAt(right) - 'A']++;
                maxFreq = Math.max(maxFreq, freq[s.charAt(right) - 'A']);

                if ((right - left + 1) - maxFreq <= k) {
                    maxLength = Math.max(maxLength, right - left + 1);
                }

            }
        }
        return maxLength;
    }

/************************************************************ Optimal Approach ************************************************/

TC - O(n)
SC - O(1)
Idea - Use the sliding window method with two pointers (left and right). As you move the right pointer, update the frequency array to count characters and track the most frequent one. 
If the characters to change (window size - max frequency) are more than k, move the left pointer to shrink the window. 
Keep updating the maximum window size and return it in the end.

public int characterReplacement(String s, int k) {
        int[] freq = new int[26];
        int left = 0;
        int maxFreq = 0;
        int maxWindow = 0;

        for (int right = 0; right < s.length(); right++) {
            // update the frequency of curr character
            freq[s.charAt(right) - 'A']++;

            // update the max frequency
            maxFreq = Math.max(maxFreq, freq[s.charAt(right) - 'A']);

            int windowSize = right - left + 1;

            // if windowSize - maxFreq > k,
            // then shrink the window
            if (windowSize - maxFreq > k) {
                freq[s.charAt(left) - 'A']--;
                left++;
            }

            windowSize = right - left + 1;
            maxWindow = Math.max(maxWindow, windowSize);
        }
        return maxWindow;
    }
