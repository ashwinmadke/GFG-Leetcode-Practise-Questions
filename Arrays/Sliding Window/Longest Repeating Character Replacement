// https://leetcode.com/problems/longest-repeating-character-replacement/

Brute Force : 
Idea - Generate all possible substrings, and for each substring calculate the frequency of each character.
       If number of changes needed to convert the substring to all same characters is â‰¤ k, I update max length.

TC - O(n^3)
SC - O(1)

public int characterReplacement(String s, int k) {
       int maxLen = 0;

        //start index for substring
        for(int i=0; i<s.length(); i++){

            //end index j (substring end)
            for(int j=i; j<s.length(); j++){

                //frequency array for each substring
                int[] freq = new int[26];
                int maxFreq = 0;

                // count frequency by iterating from i to j
                for(int p=i; p<= j; p++){
                    int idx = s.charAt(p) - 'A';
                    freq[idx]++;
                    maxFreq = Math.max(maxFreq, freq[idx]);
                }

                int windowLen = j-i+1;
                int changesNeeded = windowLen - maxFreq;

                // if changesNeeded is less than or equal k, than update maxLen
                if(changesNeeded <= k){
                    maxLen = Math.max(maxLen,windowLen);
                }
            }
        }
        return maxLen; 
    }

/************************************************************ Optimal Approach ************************************************/

TC - O(n)
SC - O(1)
Idea - Use the sliding window method with two pointers (left and right). As you move the right pointer, update the frequency array to count characters and track the most frequent one. 
If the characters to change (window size - max frequency) are more than k, move the left pointer to shrink the window. 
Keep updating the maximum window size and return it in the end.

public int characterReplacement(String s, int k) {
        int[] freq = new int[26];
        int left = 0;
        int maxFreq = 0;
        int maxWindow = 0;

        for (int right = 0; right < s.length(); right++) {
            // update the frequency of curr character
            freq[s.charAt(right) - 'A']++;

            // update the max frequency
            maxFreq = Math.max(maxFreq, freq[s.charAt(right) - 'A']);

            int windowSize = right - left + 1;

            // if windowSize - maxFreq > k,
            // then shrink the window
            if (windowSize - maxFreq > k) {
                freq[s.charAt(left) - 'A']--;
                left++;
            }

            windowSize = right - left + 1;
            maxWindow = Math.max(maxWindow, windowSize);
        }
        return maxWindow;
    }
