// https://leetcode.com/problems/longest-repeating-character-replacement/

/************************************************************ Brute Force Approach ************************************************/

Steps:
Iterate over all possible substrings.
Count the frequency of characters in the substring.
Calculate how many replacements are needed to make all characters the same.
If replacements â‰¤ k, update the max length.

TC - O(n^2)
SC - O(1)


public int characterReplacement(String s, int k) {
        int n = s.length();
        int maxLength = 0;

        // Iterate over all possible start point of substring
        for (int left = 0; left < n; left++) {
            int[] freq = new int[26];
            int maxFreq = 0;

            // Iterate over all possible end point of substring
            for (int right = left; right < n; right++) {
                freq[s.charAt(right) - 'A']++;
                maxFreq = Math.max(maxFreq, freq[s.charAt(right) - 'A']);

                if ((right - left + 1) - maxFreq <= k) {
                    maxLength = Math.max(maxLength, right - left + 1);
                }

            }
        }
        return maxLength;

    }
