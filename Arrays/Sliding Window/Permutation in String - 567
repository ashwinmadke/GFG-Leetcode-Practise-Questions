// https://leetcode.com/problems/permutation-in-string/description/

Optimal - Sliding Window 

Idea: 26 size ke 2 frequency arrays banao. s1 ka freq array build karo. s2 par s1.length() ka window slide karo aur s2_freq update karte jao.
Agar dono freq arrays match karte hain, toh permutation mil gaya â†’ return true. Warna window slide karo.

TC - O(m+n)
SC - O(26)

public boolean checkInclusion(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();

        if(n>m) return false;

        int[] freq_s1 = new int[26];
        int[] freq_s2 = new int[26];

        for(int i=0; i<n; i++){ // update freq of characters in s1
            freq_s1[s1.charAt(i) - 'a']++;
        }

        //slide the window over s2
        int left = 0;
        int right = 0;

        while (right < m){
            // include new characters from right end of window
            freq_s2[s2.charAt(right) - 'a']++;

            //check if curr window size matches the size of s1
            if(right - left + 1 > n){
                //shrink window from left side
                freq_s2[s2.charAt(left) - 'a']--;
                left++;
            }
            // check if curr window frequency matches s1's frequency
            if(Arrays.equals(freq_s1,freq_s2)){
                return true;
            }
            right++;
        }
        return false;
    }
