// https://leetcode.com/problems/longest-substring-without-repeating-characters/description/

Optimal Approach
Idea - Use sliding window with two pointers and a hash set/map to track characters in the current window; 
expand the right pointer and shrink the left when a duplicate is found, keeping track of the maximum length.
TC - O(N)
SC - O(N)

public int lengthOfLongestSubstring(String s) {
        Set<Character> seen = new HashSet<>();
        int left = 0, right = 0, maxLen = 0;

        while (right < s.length()){
            char currentChar = s.charAt(right);
            //agar duplicate milta hai to window size chota kardo
            while (seen.contains(currentChar)){
                seen.remove(s.charAt(left));
                left++;
            }
            // add curr character and update max len
            seen.add(currentChar);
            maxLen = Math.max(maxLen, right-left+1);
            right++;
        }
        return maxLen;
    }
