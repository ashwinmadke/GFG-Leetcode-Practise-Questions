// https://leetcode.com/problems/majority-element/description/

Brute Force - 
Count frequency of each element using nested loop,and if count > n/2 , return that element 
TC - O(n^2)
SC - O(1)

public int majorityElement(int[] nums) {
        int n = nums.length;
    
        for(int i=0; i<n; i++){
            int count = 0;
            for(int j=0; j<n; j++){
                if(nums[j] == nums[i]){
                    count++;
                }
            }
            if(count > n/2){
                return nums[i];
            }
        }
        return -1;
    }

Better Approach -
Traverse the array, update count in a hashmap. Return element with frequency > n/2.
TC - O(n)
SC - O(n)

public int majorityElement(int[] nums) {
       int n = nums.length;
       HashMap<Integer, Integer> freqmap = new HashMap<>();

       for(int i : nums){
        freqmap.put(i, freqmap.getOrDefault(i, 0) + 1);

            if(freqmap.get(i) > n/2){
                return i;
            }
       }
       return -1;
    }


