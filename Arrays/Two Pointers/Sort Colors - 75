// https://leetcode.com/problems/sort-colors/

*********************************************************************************************************************************************************************
Brute Approach - Apply sorting
TC - O(n)
SC - O(1)

public void sortColors(int[] nums) {
    Arrays.sort(nums);
}

*********************************************************************************************************************************************************************
Optimal Approach - Use Dutch National Flag Algo
Idea – take 3 pointers (lo, mid, hi). place lo and mid at the start, hi at the end. now keep checking element at mid until (mid <= hi). 
if nums[mid] is 0 then swap with lo and increment both lo and mid, if nums[mid] is 1 then just increment mid, and if nums[mid] is 2 then swap with hi and decrement hi.

TC - O(n)
SC - O(1)

public void sortColors(int[] nums) {
        int n = nums.length;
        int lo = 0, mid = 0;
        int hi = n-1;
	
	    while(mid <= hi){
		    if(nums[mid] == 0){
			swap(nums, lo, mid);
			lo++;
			mid++;
		    }
		    else if(nums[mid] == 1){
			mid++;
		    }
            else{
                swap(nums, mid, hi);
                hi--;
            }
	    }
    }

    private void swap(int[] nums, int lo, int hi){
        int temp = nums[lo];
        nums[lo] = nums[hi];
        nums[hi] = temp;
    }

*********************************************************************************************************************************************************************
TC - O(n)
SC - O(1)

Idea – traverse the array once and count how many 0, 1 and 2 are present. then again traverse the array and overwrite values: fill 0s first, then 1s, and finally 2s.

public void sortColors(int[] nums){
	int count0 = 0, count1 = 0, count2 = 0;
	
	//count frequency of each number
	for(int num : nums){
		if(num==0) count0++;
		else if(num==1) count1++;
		else count2++;
	}
	
	//overrite array
	int i = 0;
	while(count0 > 0){
		nums[i++] = 0;
		count0--;
	}	
	while(count1 > 0){
		nums[i++] = 1;
		count1--;
	}	
	while(count2 > 0){
		nums[i++] = 2;
		count2--;
	}
}
