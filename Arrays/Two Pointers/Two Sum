// https://leetcode.com/problems/two-sum/

Approach - Brute Force Approach 
Idea - Try all pairs using nested loops

TC - O(n^2)
SC - O(1)

public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for(int i=0; i<n-1; i++){ // outer loop will pick the first number
            for(int j=i+1; j<n; j++){ // inner loop will pick the second number
                if(nums[i] + nums[j] == target){ //Check if their sum equals to target
                   return  new int[]{i,j}; // return indices of the pair
                }
            }
        }
        return new int[]{}; // no valid pair found
}


/************************************************************ Two Pointers (Will only work if array is sorted) ************************************************/
TC - O(n)
SC - O(1)

Approach -
1. Initialize 2 pointers, left at start and right at end.
2. While left < right, calculate the sum of the two numbers.
	a. If sum equals to the target, return the indices.
	b. If the sum is less than the target, move the left pointer one step towards right (increase the sum).
	c. If the sum is greater than the target, move the right pointer one step towards left (decrease the sum).
3. If no solution exists, return an empty result.

public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int i=0;
        int j=n-1;

        while (i<j){
            int sum = nums[i] + nums[j];
            if( sum == target){
                return new int[]{i,j};
            }
            else if(sum > target){
                j--;
            }
            else {
                i++;
            }
        }
        return new int[] {};
    }

/************************************************************ Optimal Approach - Using HashMap ************************************************/
TC - O(n)
SC - O(n)

Approach - 
1. Traverse the array once, maintaining a hash map to store the values and their indices.
2. For each number in the array, calculate its complement (i.e. target - nums[i]).
3. Check if the complement already exists in the hash map:
	a. If yes, return the indices of the complement and the current number.
	b. If no, store the current number with its index in the map.

public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
       //map to store the numbers & their indices
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0;i<n; i++){
            int complement = target-nums[i]; // calculate complement
            if(map.containsKey(complement)){ // check if complement exists in map
                return new int[] {map.get(complement),i}; // if found return indices
            }
            map.put(nums[i],i );// add curr number & its index into map
        }
        return new int[] {}; // if no solution found , return empty array
    }
