// https://leetcode.com/problems/remove-duplicates-from-sorted-array/


/************************************************************ Brute Force Approach ************************************************/

TC - O(n) = [ O(n) Traversal + O(n) comparison + O(n) copy back ]
SC - O(n) bcoz of temp array

Approach -
1.Create a temp array of the same size as nums[].
2.Copy the first element of nums[] into temp[].
3.While iterating through nums[], compare each element with the last stored element in temp[].
4.If it's different, add it to temp[].
5.Copy elements from temp[] back to nums[].

public int removeDuplicates(int[] nums) {
        int n = nums.length;
        
        int[] temp = new int[n];
        temp[0] = nums[0] ; // first ele is unique
        int j = 1; // index for temp array

        for(int i=0; i<n; i++){
            if(nums[i] != temp[j-1]){
                temp[j] = nums[i];
                j++;
            }
        }
        // copy back to org array
        for(int i=0; i<n; i++){
            nums[i] = temp[i];
        }
        return j; // new length;
    }


/************************************************************ Two Pointers Approach ************************************************/
TC - O(n)
SC - O(1)

Approach -
1.Take two pointers: i and j.
2.Pointer i keeps track of the position where the next unique element should be placed.
3.Pointer j explores the array to find unique elements.
4.Start with i = 0 (pointing to first element) and j = 1 (pointing to second element).
5.Move j from left to right through the array:
	a. If the element at j is not equal to the element at i (indicating a unique element), increment i and overwrite the value at i with the value at j.
6.After the loop, the first i + 1 elements of the array will contain the unique elements.
7.Return i+1 for unique elements.

public int removeDuplicates(int[] nums) {
        int n = nums.length;
        int i = 0; // i -> unique element
        int j = 1; // j -> find unique element

        while (j<n){
            if(nums[i] != nums[j]){
                i++;
                nums[i] = nums[j];
            }
                j++; // increment j to find unique element
        }
        return i+1;
    }
