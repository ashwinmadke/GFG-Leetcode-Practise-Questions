// https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

***********************************************************************************************************************************************
Brute Approach - Use nested Loops
TC - O(n^2)
SC - O(1)

public class TwoSum {
    public int[] twoSum(int[] numbers, int target){
        for(int i=0; i< numbers.length-1; i++){
            for(int j=1; j< numbers.length; j++){
                if(numbers[i] + numbers[j] == target){
                    return new int[]{i+1,j+1};
                }
            }
        }
        return new int[] {-1,-1};
    }
}

***********************************************************************************************************************************************
Better approach - binary search 
Idea - pehle to x nikal lo target - arr[i] se and jaisa ki array sorted hai to yadi x, i+1 se arr.length-1 ki range me mil jaye to return kardo uska index and i index, else return kardo {-1,-1}.
TC - O(nlogn)
SC - O(1)

public int[] twoSumBinarySearch(int[] numbers, int target){
        for(int i =0; i< numbers.length; i++){
            int x = target - numbers[i];

            int start = i+1; // i+1 se end ke range me he check karenge
            int end = numbers.length-1;
            while (start <= end){
                int mid = start + (end - start)/2;
                if(numbers[mid] == x){
                    {
                        return new int[] {i,mid}; // {i+1.mid+1} for 1 based indexing
                    }
                }
                else if(numbers[mid] < x){
                    start = mid+1;
                }
                else {
                    end = mid - 1;
                }
            }
        }
        return new int[] {-1,-1};
    }

***********************************************************************************************************************************************
Optimal Approach - Two Pointers
TC - O(n)
SC - O(1)

public int[] twoSum(int[] numbers, int target) {
        int n = numbers.length;
        int left = 0;
        int right = n-1;

        while(left < right){
            int sum = numbers[left] + numbers[right];
            if(sum == target) return new int[] {left+1,right+1};
            else if(sum < target) {
                left ++;
            }
            else{
                right--;
            }
        }
        return new int[] {-1,-1};
    }
