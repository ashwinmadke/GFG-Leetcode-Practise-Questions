// https://leetcode.com/problems/trapping-rain-water/

Brute Force :
Idea - Use nested loops. For each bar, find the max height to its left and right. 
Take the smaller of those two, and calculate min(leftMax, rightMax) - height[i] to get the trapped water at that position.
TC - O(N^2)
SC - O(1)

public static int trapBrute(int[] height){
        int n = height.length;
        int totalWater = 0;

        for(int i=0; i<n; i++){
            int leftMax = 0;
            int rightMax = 0;

            //find left max
            for(int j = 0; j <=i; j++){
                leftMax = Math.max(leftMax, height[j]);
            }

            //find right max
            for(int k=i; k<n; k++){
                rightMax = Math.max(rightMax,height[k]);
            }
            totalWater += Math.min(leftMax,rightMax) - height[i];
        }
        return totalWater;
 }


Better Approach :
Idea - First, precompute the maximum height to the left and right of each bar using two arrays. 
Then for each bar, trapped water = min(leftMax[i], rightMax[i]) - height[i].
TC - O(N)
SC - O(N)

public static int trapBetter(int[] height){
        int n = height.length;
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];
        int totalWater = 0;

        //fill leftmax
        leftMax[0] = height[0];
        for(int i=1; i<n; i++){
            leftMax[i] = Math.max(leftMax[i-1],height[i]);
        }

        //fill rightmax
        rightMax[n-1] = height[n-1];
        for(int i=n-2; i>=0; i--){
            rightMax[i] = Math.max(rightMax[i+1],height[i]);
        }

        //calculate trapped water
        for(int i=0; i<n; i++){
            totalWater += Math.min(leftMax[i],rightMax[i]) - height[i];
        }
        return totalWater;
    }

Optimal Approach :
Idea - Use two pointers from both ends, and keep track of the max height seen so far from the left and right.
At each step, move the pointer at the smaller height inward, and calculate water as maxSoFar - height[i] if possible.
TC - O(N)
SC - O(1)

public static int trapTwoPointers(int[] height){
        int n = height.length;
        int left = 0;
        int right = n-1;
        int leftMax = 0;
        int rightMax = 0;
        int totalWater = 0;

        //apply two pointers
        while (left < right){
            if(height[left] < height[right]){
                if(height[left] >= leftMax){
                    leftMax = height[left];
                }
                else {
                    totalWater += leftMax - height[left];
                }
                left++;
            }
            else {
                if(height[right] >= rightMax){
                    rightMax = height[right];
                }
                else {
                    totalWater += rightMax - height[right];
                }
                right--;
            }
        }
        return totalWater;
    }
