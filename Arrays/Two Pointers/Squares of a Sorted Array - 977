// https://leetcode.com/problems/squares-of-a-sorted-array/

*******************************************************************************************************************************************************************
Brute Approach - 
Idea - Square each element and sort the result array and return
TC - O(nlogn)
SC - O(1), auxilary

public int[] sortedSquares(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];

        //step 1 :  Square elements
        for(int i=0; i<n; i++){
            result[i] = nums[i] * nums[i];
        }
        //step 2 : sort array & return
        Arrays.sort(result);
        return result;
}

*******************************************************************************************************************************************************************
Optimal Approach - Using two pointers
// Idea - take 2 pointers one at start & another at end of array
// square both and check which is greater and start filling result
// from end using k pointer, and adjust pointers accordingly and 
// always decrement k
// repeat until left < right

TC - O(n)
SC - O(1), auxilary

    public int[] sortedSquares(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];

        int left = 0, right = n-1;
        int k = n-1;

        while(left <= right){
            int leftSquare = nums[left] * nums[left];
            int rightSquare = nums[right] * nums[right];

            if(leftSquare > rightSquare){
                result[k] = leftSquare;
                left++;
            }
            else{
                result[k] = rightSquare;
                right--;
            }
            k--;
        }
        return result;
    }
