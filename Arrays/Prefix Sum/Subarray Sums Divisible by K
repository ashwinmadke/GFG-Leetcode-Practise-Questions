// https://leetcode.com/problems/subarray-sums-divisible-by-k/description/

*********************************************************************************************************************************************************************
Brute Approach - Nested Loop
Idea - Generate all subarrays and check each subarray if their sum divisible by k, increment count.
TC - O(n^2)
SC - O(1)

public int subarraysDivByK(int[] nums, int k) {
        int n = nums.length;
        int count = 0;
        for(int i=0; i<n; i++){
            int sum = 0;
            for(int j=i; j<n; j++){
                sum += nums[j];
                if(sum % k==0) count++;
            }
        }
        return count;
    }

*********************************************************************************************************************************************************************
Optimal Approach - Prefix Sum + Hashmap
Idea - Use a HashMap to track remainder → frequency. Iterate array, update running sum, compute positive remainder. 
If remainder seen before, add its frequency to count. Update map with current remainder. Initialize map with 0→1.
TC - O(n)
SC - O(n)

public int subarraysDivByK(int[] nums, int k) {
        int count = 0;
        int prefixSum = 0;
        // reminder , frequency
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0,1);

        for(int i : nums){
            prefixSum += i;
            int mod = ((prefixSum % k)+ k) % k; // to handle negative reminder
            count += map.getOrDefault(mod,0);
            map.put(mod, map.getOrDefault(mod,0)+1);
        }
        return count;
    }
